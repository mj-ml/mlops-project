services:
#  magic-platform:
#    env_file:
#      - .env.dev
#    build:
#      context: .
#    command: /app/run_app.sh mage start $PROJECT_NAME
#    ports:
#      - 6789:6789
#    volumes:
#      # Mount your local codebase to the container.
#      - .:/$MAGE_CODE_PATH
#      # Store the data output on local machine to easily debug (optional).
#      - ~/.mage_data:/$MAGE_CODE_PATH/mage_data
#      # Initial credentials to create an IAM user with limited permissions for deployment.
#      - ~/.aws:/root/.aws
#      # Local machine’s SSH keys to pull and push to your GitHub repository.
#      - ~/.ssh:/root/.ssh:ro
#      # Local machine’s GitHub configs
#      - ~/.gitconfig:/root/.gitconfig:ro
#    restart: on-failure:5
#    networks:
#      - app-network
#    depends_on:
#      - magic-database
#    stdin_open: true # used for interactive debugging
#    tty: true # used for interactive debugging
#  magic-database:
#    image: pgvector/pgvector:0.6.0-pg16
#    env_file:
#      - .env.dev
#    ports:
#      - 5432:5432
#    volumes:
#      - ~/.postgres/data:/var/lib/postgresql/data
#      # Custom database initialization scripts (optional).
#      - ./scripts/database:/docker-entrypoint-initdb.d
#    restart: always
#    networks:
#      - app-network

  mlflow:
    build:
      context: .
      dockerfile: mlflow.dockerfile
    ports:
      - "5000:5000"
    volumes:
      - "${PWD}/mlflow:/home/mlflow/"
    networks:
      - app-network
  api:
    build:
      context: .
      dockerfile: api.dockerfile
    ports:
      - "9696:9696"
    networks:
      - app-network

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    networks:
      - app-network

  airflow-init:
    image: apache/airflow:2.5.1
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__EXECUTOR: 'LocalExecutor'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@postgres/airflow'
    networks:
      - app-network
    entrypoint: /bin/bash -c "airflow db init && airflow users create -u admin -p admin -f admin -l admin -r Admin -e admin@example.com"

  webserver:
    image: apache/airflow:2.5.1
    depends_on:
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: 'LocalExecutor'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@postgres/airflow'
    ports:
      - "8080:8080"
    networks:
      - app-network
    command: webserver

  scheduler:
    image: apache/airflow:2.5.1
    depends_on:
      - webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: 'LocalExecutor'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@postgres/airflow'
    networks:
      - app-network
    command: scheduler

  worker:
    image: apache/airflow:2.5.1
    depends_on:
      - scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: 'LocalExecutor'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@postgres/airflow'
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
